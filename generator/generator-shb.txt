using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Tharga.Toolkit.Console.Command.Base;

#pragma warning disable CS1998

#if !meow
namespace SaintCoinach.Cmd.Commands {
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct Vector3
    {

        public Vector3(float x, float y, float z)
        {
            X = x;
            Y = y;
            Z = z;
        }
        public Vector3(string commaseparated)
        {
            string[] array = commaseparated.Split(new char[]
            {
                ','
            }, StringSplitOptions.RemoveEmptyEntries);

            X = float.Parse(array[0], CultureInfo.InvariantCulture);
            Y = float.Parse(array[1], CultureInfo.InvariantCulture);
            Z = float.Parse(array[2], CultureInfo.InvariantCulture);
        }

        public float X;
        public float Y;
        public float Z;
    }

    public class LeveCommand : ActionCommandBase
    {

        private ARealmReversed _Realm;

        public LeveCommand(ARealmReversed realm) : base("leve", "Builds Leve Database")
        {
            _Realm = realm;
        }

        public override async Task<bool> InvokeAsync(string paramList)
        {
            if (string.IsNullOrEmpty(paramList) || !File.Exists(paramList))
            {
                OutputInformation($"Please specify db location {paramList}");
                return false;
            }

            if (File.Exists($"{paramList}.backup"))
                File.Delete($"{paramList}.backup");

            File.Copy(paramList, $"{paramList}.backup");

            var existing = JsonConvert.DeserializeObject<LeveDatabase>(File.ReadAllText(paramList));

            var items = _Realm.GameData.GetSheet<SaintCoinach.Xiv.CraftLeve>();
            var leveNpcs = _Realm.GameData.GetSheet<SaintCoinach.Xiv.Level>();

            foreach (var ir in items)
            {
                var t = ir.Leve;

                if (t.LeveAssignmentType.Key > 4 && t.LeveAssignmentType.Key < 13 && existing.Leves.All(i => i.LeveId != t.Key))
                {
                    // This program will only export Shadowbringers levequests. See history for older version.
                    var pickupNpc = 1027847;
                    var pickupNpcMap = 819;
                    var pickupNpcLocation = new Vector3(-73.38852f,19.99979f,-110.7495f);

                    var turninNpc = 1027848;
                    var turninNpcMap = 819;
                    var turninNpcLocation = new Vector3(-72.5716f, 19.99979f, -113.66f);

                    var item = ir.Items.First().Item;

                    var next = new Leve
                    {
                        Classes = t.LeveAssignmentType.Name,
                        ItemId = item.Key,
                        ItemName = item.Name,
                        ExpReward = t.ExpReward,
                        Repeats = ir.Repeats,
                        LeveId = t.Key,
                        Level = t.ClassJobLevel, //t.StartLevel.Map.TerritoryType.Key,
                        Name = t.Name,
                        NumItems = ir.Items.Sum(i => i.Count),
                        PickUpNpc = pickupNpc,
                        TurnInNpc = turninNpc
                    };

                    if (next.PickUpNpc == 0)
                        continue;

                    existing.Leves.Add(next);

                    OutputInformation($"Added Leve # {next.LeveId} - {next.Name} - {next.Classes}");

                    if (existing.Npcs.All(i => i.NpcId != next.TurnInNpc))
                    {
                        var nnpc = new LeveNpc
                        {
                            LocationName = "The Crystarium",
                            MapId = turninNpcMap,
                            NpcId = next.TurnInNpc,
                            Pos = turninNpcLocation
                        };

                        OutputInformation($"1 Added Turn In NPC # {nnpc.NpcId} - {nnpc.LocationName} - {nnpc.Pos}");
                        existing.Npcs.Add(nnpc);
                    }

                    if (next.PickUpNpc != 0 && existing.Npcs.All(i => i.NpcId != next.PickUpNpc))
                    {
                        var nnpc = new LeveNpc
                        {
                            LocationName = "The Crystarium",
                            MapId = pickupNpcMap,
                            NpcId = pickupNpc,
                            Pos = pickupNpcLocation
                        };

                        OutputInformation($"2 Added Turn In NPC # {nnpc.NpcId} - {nnpc.LocationName} - {nnpc.Pos}");
                        existing.Npcs.Add(nnpc);
                    }

                    File.WriteAllText(paramList, JsonConvert.SerializeObject(existing, Formatting.Indented));
                }
            }

            return true;
        }

        public class LeveDatabase
        {
            public List<Leve> Leves;
            public List<LeveNpc> Npcs;
        }

        public class Leve
        {
            public int LeveId { get; set; }
            public string Name { get; set; }
            public string Classes { get; set; }
            public int Level { get; set; }
            public int ExpReward { get; set; }
            public int Repeats { get; set; }
            public int PickUpNpc { get; set; }
            public int TurnInNpc { get; set; }
            public int NumItems { get; set; }
            public int ItemId { get; set; }
            public string ItemName { get; set; }

        }

        public class LeveNpc
        {
            public int NpcId { get; set; }
            public Vector3 Pos { get; set; }
            public int MapId { get; set; }
            public string LocationName { get; set; }
        }
    }
}
#endif